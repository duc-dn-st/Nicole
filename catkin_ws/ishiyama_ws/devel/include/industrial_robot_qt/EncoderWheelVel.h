// Generated by gencpp from file industrial_robot_qt/EncoderWheelVel.msg
// DO NOT EDIT!


#ifndef INDUSTRIAL_ROBOT_QT_MESSAGE_ENCODERWHEELVEL_H
#define INDUSTRIAL_ROBOT_QT_MESSAGE_ENCODERWHEELVEL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace industrial_robot_qt
{
template <class ContainerAllocator>
struct EncoderWheelVel_
{
  typedef EncoderWheelVel_<ContainerAllocator> Type;

  EncoderWheelVel_()
    : enc_left_wheel(0)
    , enc_right_wheel(0)  {
    }
  EncoderWheelVel_(const ContainerAllocator& _alloc)
    : enc_left_wheel(0)
    , enc_right_wheel(0)  {
  (void)_alloc;
    }



   typedef int32_t _enc_left_wheel_type;
  _enc_left_wheel_type enc_left_wheel;

   typedef int32_t _enc_right_wheel_type;
  _enc_right_wheel_type enc_right_wheel;





  typedef boost::shared_ptr< ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator> const> ConstPtr;

}; // struct EncoderWheelVel_

typedef ::industrial_robot_qt::EncoderWheelVel_<std::allocator<void> > EncoderWheelVel;

typedef boost::shared_ptr< ::industrial_robot_qt::EncoderWheelVel > EncoderWheelVelPtr;
typedef boost::shared_ptr< ::industrial_robot_qt::EncoderWheelVel const> EncoderWheelVelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator1> & lhs, const ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator2> & rhs)
{
  return lhs.enc_left_wheel == rhs.enc_left_wheel &&
    lhs.enc_right_wheel == rhs.enc_right_wheel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator1> & lhs, const ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace industrial_robot_qt

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ed6384bc034f305efeb0ad3b74200ed";
  }

  static const char* value(const ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ed6384bc034f305ULL;
  static const uint64_t static_value2 = 0xefeb0ad3b74200edULL;
};

template<class ContainerAllocator>
struct DataType< ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "industrial_robot_qt/EncoderWheelVel";
  }

  static const char* value(const ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 enc_left_wheel\n"
"int32 enc_right_wheel\n"
;
  }

  static const char* value(const ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enc_left_wheel);
      stream.next(m.enc_right_wheel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EncoderWheelVel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::industrial_robot_qt::EncoderWheelVel_<ContainerAllocator>& v)
  {
    s << indent << "enc_left_wheel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.enc_left_wheel);
    s << indent << "enc_right_wheel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.enc_right_wheel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INDUSTRIAL_ROBOT_QT_MESSAGE_ENCODERWHEELVEL_H
