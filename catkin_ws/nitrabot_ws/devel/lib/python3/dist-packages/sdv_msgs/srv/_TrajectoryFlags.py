# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sdv_msgs/TrajectoryFlagsRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TrajectoryFlagsRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "sdv_msgs/TrajectoryFlagsRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajectoryFlagsRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sdv_msgs/TrajectoryFlagsResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sdv_msgs.msg

class TrajectoryFlagsResponse(genpy.Message):
  _md5sum = "df654eebc374fc4753a7ee384bb5c8c5"
  _type = "sdv_msgs/TrajectoryFlagsResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """sdv_msgs/TrajectoryPoint trajectory_point
bool emergency_stop_flag
bool avoidance_flag

================================================================================
MSG: sdv_msgs/TrajectoryPoint
# TrajectoryPoint.msg

#iteration of the trajectory points (time can be received by: trajectory_point * sampling_time)
uint32 trajectory_point
float32 x
float32 y
float32 heading
float32 x_dot
float32 y_dot
float32 velocity_mps
float32 acceleration_mps2
float32 heading_rate_radps
float32 heading_acc_radps2
"""
  __slots__ = ['trajectory_point','emergency_stop_flag','avoidance_flag']
  _slot_types = ['sdv_msgs/TrajectoryPoint','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       trajectory_point,emergency_stop_flag,avoidance_flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajectoryFlagsResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.trajectory_point is None:
        self.trajectory_point = sdv_msgs.msg.TrajectoryPoint()
      if self.emergency_stop_flag is None:
        self.emergency_stop_flag = False
      if self.avoidance_flag is None:
        self.avoidance_flag = False
    else:
      self.trajectory_point = sdv_msgs.msg.TrajectoryPoint()
      self.emergency_stop_flag = False
      self.avoidance_flag = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I9f2B().pack(_x.trajectory_point.trajectory_point, _x.trajectory_point.x, _x.trajectory_point.y, _x.trajectory_point.heading, _x.trajectory_point.x_dot, _x.trajectory_point.y_dot, _x.trajectory_point.velocity_mps, _x.trajectory_point.acceleration_mps2, _x.trajectory_point.heading_rate_radps, _x.trajectory_point.heading_acc_radps2, _x.emergency_stop_flag, _x.avoidance_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectory_point is None:
        self.trajectory_point = sdv_msgs.msg.TrajectoryPoint()
      end = 0
      _x = self
      start = end
      end += 42
      (_x.trajectory_point.trajectory_point, _x.trajectory_point.x, _x.trajectory_point.y, _x.trajectory_point.heading, _x.trajectory_point.x_dot, _x.trajectory_point.y_dot, _x.trajectory_point.velocity_mps, _x.trajectory_point.acceleration_mps2, _x.trajectory_point.heading_rate_radps, _x.trajectory_point.heading_acc_radps2, _x.emergency_stop_flag, _x.avoidance_flag,) = _get_struct_I9f2B().unpack(str[start:end])
      self.emergency_stop_flag = bool(self.emergency_stop_flag)
      self.avoidance_flag = bool(self.avoidance_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I9f2B().pack(_x.trajectory_point.trajectory_point, _x.trajectory_point.x, _x.trajectory_point.y, _x.trajectory_point.heading, _x.trajectory_point.x_dot, _x.trajectory_point.y_dot, _x.trajectory_point.velocity_mps, _x.trajectory_point.acceleration_mps2, _x.trajectory_point.heading_rate_radps, _x.trajectory_point.heading_acc_radps2, _x.emergency_stop_flag, _x.avoidance_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectory_point is None:
        self.trajectory_point = sdv_msgs.msg.TrajectoryPoint()
      end = 0
      _x = self
      start = end
      end += 42
      (_x.trajectory_point.trajectory_point, _x.trajectory_point.x, _x.trajectory_point.y, _x.trajectory_point.heading, _x.trajectory_point.x_dot, _x.trajectory_point.y_dot, _x.trajectory_point.velocity_mps, _x.trajectory_point.acceleration_mps2, _x.trajectory_point.heading_rate_radps, _x.trajectory_point.heading_acc_radps2, _x.emergency_stop_flag, _x.avoidance_flag,) = _get_struct_I9f2B().unpack(str[start:end])
      self.emergency_stop_flag = bool(self.emergency_stop_flag)
      self.avoidance_flag = bool(self.avoidance_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I9f2B = None
def _get_struct_I9f2B():
    global _struct_I9f2B
    if _struct_I9f2B is None:
        _struct_I9f2B = struct.Struct("<I9f2B")
    return _struct_I9f2B
class TrajectoryFlags(object):
  _type          = 'sdv_msgs/TrajectoryFlags'
  _md5sum = 'df654eebc374fc4753a7ee384bb5c8c5'
  _request_class  = TrajectoryFlagsRequest
  _response_class = TrajectoryFlagsResponse
