// Generated by gencpp from file sdv_msgs/TrajectoryFlagsResponse.msg
// DO NOT EDIT!


#ifndef SDV_MSGS_MESSAGE_TRAJECTORYFLAGSRESPONSE_H
#define SDV_MSGS_MESSAGE_TRAJECTORYFLAGSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sdv_msgs/Trajectory.h>

namespace sdv_msgs
{
template <class ContainerAllocator>
struct TrajectoryFlagsResponse_
{
  typedef TrajectoryFlagsResponse_<ContainerAllocator> Type;

  TrajectoryFlagsResponse_()
    : trajectory()
    , emergency_stop_flag(false)
    , avoidance_flag(false)  {
    }
  TrajectoryFlagsResponse_(const ContainerAllocator& _alloc)
    : trajectory(_alloc)
    , emergency_stop_flag(false)
    , avoidance_flag(false)  {
  (void)_alloc;
    }



   typedef  ::sdv_msgs::Trajectory_<ContainerAllocator>  _trajectory_type;
  _trajectory_type trajectory;

   typedef uint8_t _emergency_stop_flag_type;
  _emergency_stop_flag_type emergency_stop_flag;

   typedef uint8_t _avoidance_flag_type;
  _avoidance_flag_type avoidance_flag;





  typedef boost::shared_ptr< ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryFlagsResponse_

typedef ::sdv_msgs::TrajectoryFlagsResponse_<std::allocator<void> > TrajectoryFlagsResponse;

typedef boost::shared_ptr< ::sdv_msgs::TrajectoryFlagsResponse > TrajectoryFlagsResponsePtr;
typedef boost::shared_ptr< ::sdv_msgs::TrajectoryFlagsResponse const> TrajectoryFlagsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator1> & lhs, const ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.trajectory == rhs.trajectory &&
    lhs.emergency_stop_flag == rhs.emergency_stop_flag &&
    lhs.avoidance_flag == rhs.avoidance_flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator1> & lhs, const ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sdv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd4fde1f11e0a0f6e47a699d2934c6b7";
  }

  static const char* value(const ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd4fde1f11e0a0f6ULL;
  static const uint64_t static_value2 = 0xe47a699d2934c6b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sdv_msgs/TrajectoryFlagsResponse";
  }

  static const char* value(const ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sdv_msgs/Trajectory trajectory\n"
"bool emergency_stop_flag\n"
"bool avoidance_flag\n"
"\n"
"\n"
"================================================================================\n"
"MSG: sdv_msgs/Trajectory\n"
"# Trajectory.msg\n"
"# similar msg to the msg in Autoware.auto\n"
"\n"
"std_msgs/Header header\n"
"TrajectoryPoint[] points\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sdv_msgs/TrajectoryPoint\n"
"# TrajectoryPoint.msg\n"
"\n"
"#iteration of the trajectory points (time can be received by: trajectory_point * sampling_time)\n"
"uint32 trajectory_point\n"
"float32 x\n"
"float32 y\n"
"float32 heading\n"
"float32 x_dot\n"
"float32 y_dot\n"
"float32 velocity_mps\n"
"float32 acceleration_mps2\n"
"float32 heading_rate_radps\n"
"float32 heading_acc_radps2\n"
;
  }

  static const char* value(const ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trajectory);
      stream.next(m.emergency_stop_flag);
      stream.next(m.avoidance_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryFlagsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sdv_msgs::TrajectoryFlagsResponse_<ContainerAllocator>& v)
  {
    s << indent << "trajectory: ";
    s << std::endl;
    Printer< ::sdv_msgs::Trajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectory);
    s << indent << "emergency_stop_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency_stop_flag);
    s << indent << "avoidance_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.avoidance_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SDV_MSGS_MESSAGE_TRAJECTORYFLAGSRESPONSE_H
