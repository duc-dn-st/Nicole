# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sdv_msgs/ControlReference.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ControlReference(genpy.Message):
  _md5sum = "a0c35083c971411263b902e2dfd735f5"
  _type = "sdv_msgs/ControlReference"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ControlReference.msg
# message which sends the reference for the low level controller

# velocity in m/s
float32 velocity_ref_front_left
float32 velocity_ref_front_right
float32 velocity_ref_back_left
float32 velocity_ref_back_right
# steering angle in rad from -pi to pi
float32 steering_ref_front_left
float32 steering_ref_front_right
float32 steering_ref_back_left
float32 steering_ref_back_right
# boolean if emergency stop necessary
bool stop_motors
"""
  __slots__ = ['velocity_ref_front_left','velocity_ref_front_right','velocity_ref_back_left','velocity_ref_back_right','steering_ref_front_left','steering_ref_front_right','steering_ref_back_left','steering_ref_back_right','stop_motors']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       velocity_ref_front_left,velocity_ref_front_right,velocity_ref_back_left,velocity_ref_back_right,steering_ref_front_left,steering_ref_front_right,steering_ref_back_left,steering_ref_back_right,stop_motors

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlReference, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.velocity_ref_front_left is None:
        self.velocity_ref_front_left = 0.
      if self.velocity_ref_front_right is None:
        self.velocity_ref_front_right = 0.
      if self.velocity_ref_back_left is None:
        self.velocity_ref_back_left = 0.
      if self.velocity_ref_back_right is None:
        self.velocity_ref_back_right = 0.
      if self.steering_ref_front_left is None:
        self.steering_ref_front_left = 0.
      if self.steering_ref_front_right is None:
        self.steering_ref_front_right = 0.
      if self.steering_ref_back_left is None:
        self.steering_ref_back_left = 0.
      if self.steering_ref_back_right is None:
        self.steering_ref_back_right = 0.
      if self.stop_motors is None:
        self.stop_motors = False
    else:
      self.velocity_ref_front_left = 0.
      self.velocity_ref_front_right = 0.
      self.velocity_ref_back_left = 0.
      self.velocity_ref_back_right = 0.
      self.steering_ref_front_left = 0.
      self.steering_ref_front_right = 0.
      self.steering_ref_back_left = 0.
      self.steering_ref_back_right = 0.
      self.stop_motors = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8fB().pack(_x.velocity_ref_front_left, _x.velocity_ref_front_right, _x.velocity_ref_back_left, _x.velocity_ref_back_right, _x.steering_ref_front_left, _x.steering_ref_front_right, _x.steering_ref_back_left, _x.steering_ref_back_right, _x.stop_motors))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.velocity_ref_front_left, _x.velocity_ref_front_right, _x.velocity_ref_back_left, _x.velocity_ref_back_right, _x.steering_ref_front_left, _x.steering_ref_front_right, _x.steering_ref_back_left, _x.steering_ref_back_right, _x.stop_motors,) = _get_struct_8fB().unpack(str[start:end])
      self.stop_motors = bool(self.stop_motors)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8fB().pack(_x.velocity_ref_front_left, _x.velocity_ref_front_right, _x.velocity_ref_back_left, _x.velocity_ref_back_right, _x.steering_ref_front_left, _x.steering_ref_front_right, _x.steering_ref_back_left, _x.steering_ref_back_right, _x.stop_motors))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.velocity_ref_front_left, _x.velocity_ref_front_right, _x.velocity_ref_back_left, _x.velocity_ref_back_right, _x.steering_ref_front_left, _x.steering_ref_front_right, _x.steering_ref_back_left, _x.steering_ref_back_right, _x.stop_motors,) = _get_struct_8fB().unpack(str[start:end])
      self.stop_motors = bool(self.stop_motors)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8fB = None
def _get_struct_8fB():
    global _struct_8fB
    if _struct_8fB is None:
        _struct_8fB = struct.Struct("<8fB")
    return _struct_8fB
